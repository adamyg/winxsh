#!/usr/bin/perl
# $Id: makelib.in,v 1.11 2022/03/20 10:53:57 cvsuser Exp $
# -*- mode: perl; tabs: 8; indent-width: 4; -*-
# makelib configuration
#
# Copyright (c) 2020 - 2022, Adam Young.
# All rights reserved.
#
# This file is part of the WinRsh/WinSSH
#
# The applications are free software: you can redistribute it
# and/or modify it under the terms of the GNU General Public License as
# published by the Free Software Foundation, version 3.
#
# Redistributions of source code must retain the above copyright
# notice, and must be distributed with the license document above.
#
# Redistributions in binary form must reproduce the above copyright
# notice, and must include the license document above in
# the documentation and/or other materials provided with the
# distribution.
#
# The applications are distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
# ==end==
#

## Package

$PACKAGE        = 'winsh';
$PACKAGE_NAME   = 'WinSSH/WinRSH';
$PACKAGE_VERSION = '0.3.0';

$PACKAGE_URL    = 'https://github.com/adamyg/winxsh';

$PACKAGE_PATH   = 'libw32';
$PACKAGE_FILE   = 'package.h';

## External

@LIBRARIES      = ();   # local libraries -l<xxx> lib<xxx>.lib

@LIBRARIES2     = (     # local libraries -l<xxx> xxx.lib
        'libw32',
        'libw32_static',
        'libz',
        'libz_static',
        'libregex',
        'libmagic',
        'libmagic_static',
        'libmbedcrypto',
        'libmbedcrypto_static',
        'libmbedtls',
        'libmbedtls_static',
        'libmbedx509',
        'libmbedx509_static',
        'libssh2',
        'libssh2_static',
        'libssh',
        'libssh_static',
        'libintl',
        'libintl_static',
        'libglib-2.0',
        'libglib-2.0_static',
        'libtermemu',
        'libNTService'
        );

@OPTLIBRARIES    = ();  # optional libraries

## Makefiles

@MAKEFILES       = (    # local makefiles
        '.',
        'libw32',
        'libz',
        'libmbedtls',
        'libssh2',
        'libssh',
        'libtermemu',
        'libNTService',
        'rsh',
        'rcmd',
        'rlogin',
        'rlogind',
        'slogin'
        );

## Toolchain

sub
Configure()
{
        # Visual studio
        ################################################################################

        if ($TOOLCHAIN =~ /^vs/) {

                set_msvc_runtime('dynamic', '$(RTSUFFIX)');

                remove_define('WIN32');
                add_define('HAVE_CONFIG_H');
                add_define('_WIN32_WINNT=0x600');       # Windows SDK

              # add_define('LIBW32_DYNAMIC');           # libw32 bindings
                add_define('LIBW32_STATIC');            # libw32 bindings

                add_xinclude('$(ROOT)/libw32');         # Extra includes; C and compiler tests.
                add_xinclude('$(ROOT)/libw32/msvc');    # MSVC specials
              # add_application_library('libw32.lib');
                add_application_library('libw32_static.lib');
        }

        ################################################################################
        # OpenWatcom

        if ($TOOLCHAIN =~ /^owc/) {

                remove_define('WIN32');
                add_define('HAVE_CONFIG_H');
                add_define('_WIN32_WINNT=0x600');       # Windows SDK

              # add_define('LIBW32_DYNAMIC');           # libw32 bindings
                add_define('LIBW32_STATIC');            # libw32 bindings


                add_xinclude('$(ROOT)/libw32');         # Extra includes; C and compiler tests.
              # add_application_library('libw32.lib');
                add_application_library('libw32_static.lib');
        }
}


# Example usage
#
#   # Configuration
#   ifeq ("$(BUILD_TYPE)","")   #default
#   BUILD_TYPE= debug
#   MAKEFLAGS+= BUILD_TYPE=debug
#   endif
#   ifneq ("$(BUILD_TYPE)","release")
#   # MSVC Run-time suffix
#   RTSUFFIX=d
#   endif
#
#   # Common flags
#   XFLAGS=
#   CFLAGS=         @CFLAGS@
#   CWARN=          @CWARN@ $(CWALL)
#   CDEBUG=         @CDEBUG@
#   CRELEASE=       @CRELEASE@
#
#   CXXFLAGS=       @CXXFLAGS@
#   CXXDEBUG=       @CXXDEBUG@
#   ifeq ("$(CXXDEBUG)","")
#   CXXDEBUG=       $(CDEBUG)
#   endif
#   CXXRELEASE=     @CXXRELEASE@
#   ifeq ("$(CXXRELEASE)","")
#   CXXRELEASE=     $(CRELEASE)
#   endif
#
#   LDDEBUG=        @LDDEBUG@
#   LDRELEASE=      @LDRELEASE@
#
#   CINCLUDE=       <additional> @CINCLUDE@
#   CEXTRA=         @DEFS@ <additional>
#
#   ifeq ("$(BUILD_TYPE)","release")
#   CFLAGS+=        $(CRELEASE) $(CWARN) $(CINCLUDE) $(CEXTRA) $(XFLAGS)
#   CXXFLAGS+=      $(CXXRELEASE) $(CWARN) $(CINCLUDE) @CXXINCLUDE@ $(CEXTRA) $(XFLAGS)
#   LDFLAGS=        $(LDRELEASE) @LDFLAGS@
#   else
#   CFLAGS+=        $(CDEBUG) $(CWARN) $(CINCLUDE) $(CEXTRA) $(XFLAGS)
#   CXXFLAGS+=      $(CXXDEBUG) $(CWARN) $(CINCLUDE) @CXXINCLUDE@ $(CEXTRA) $(XFLAGS)
#   LDFLAGS=        $(LDDEBUG) @LDFLAGS@
#   endif
#   LDLIBS=         -L$(D_LIB) @LDLIBS@ @LIBS@ @EXTRALIBS@
#

1;

